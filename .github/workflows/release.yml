name: Rust Cross-Compile and Release

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  CRATE_NAME: bilistream
  VERSION: v0.1.12 

jobs:
  build-and-release:
    name: Build for ${{ matrix.platform.os }}-${{ matrix.platform.arch }}
    runs-on: ${{ matrix.platform.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: Linux
            arch: arm64
            target: aarch64-unknown-linux-gnu
            runs-on: ubuntu-latest
            suffix: tar.gz
          - os: Linux
            arch: x64
            target: x86_64-unknown-linux-gnu
            runs-on: ubuntu-latest
            suffix: tar.gz
          - os: Windows
            arch: arm64
            target: aarch64-pc-windows-msvc
            runs-on: windows-latest
            suffix: zip
          - os: Windows
            arch: x64
            target: x86_64-pc-windows-msvc
            runs-on: windows-latest
            suffix: zip
          - os: macOS
            arch: arm64
            target: aarch64-apple-darwin
            runs-on: macos-latest
            suffix: tar.gz
          - os: macOS
            arch: x64
            target: x86_64-apple-darwin
            runs-on: macos-latest
            suffix: tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Cross-Compile Tools (Linux)
        if: matrix.platform.runs-on == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            gcc-x86-64-linux-gnu \
            g++-x86-64-linux-gnu \
            gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            gcc-riscv64-linux-gnu \
            g++-riscv64-linux-gnu \
            gcc-s390x-linux-gnu \
            g++-s390x-linux-gnu \
            gcc-powerpc-linux-gnu \
            g++-powerpc-linux-gnu \
            gcc-powerpc64-linux-gnu \
            g++-powerpc64-linux-gnu \
            gcc-powerpc64le-linux-gnu \
            g++-powerpc64le-linux-gnu [^5^]

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.platform.target }}

      - name: Build Binary
        run: |
          cargo build --locked --release --target ${{ matrix.platform.target }}
          mkdir -p release
          mv target/${{ matrix.platform.target }}/release/${{ env.CRATE_NAME }} release/

      - name: Package Binary
        run: |
          ARTIFACT_NAME="${{ env.CRATE_NAME }}-${{ env.VERSION }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}"
          if [[ "${{ matrix.platform.suffix }}" == "zip" ]]; then
            zip -j release/${ARTIFACT_NAME}.zip release/${{ env.CRATE_NAME }}
          else
            tar -czf release/${ARTIFACT_NAME}.tar.gz release/${{ env.CRATE_NAME }}
          fi

      - name: Generate SHA-256 Checksum
        run: |
          ARTIFACT_NAME="${{ env.CRATE_NAME }}-${{ env.VERSION }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}"
          shasum -a 256 release/${ARTIFACT_NAME}.${{ matrix.platform.suffix }} | cut -d ' ' -f 1 > release/${ARTIFACT_NAME}.${{ matrix.platform.suffix }}.sha256

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.CRATE_NAME }}-${{ env.VERSION }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.${{ matrix.platform.suffix }}
          path: release/${{ env.CRATE_NAME }}-${{ env.VERSION }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.${{ matrix.platform.suffix }}
          if-no-files-found: ignore
